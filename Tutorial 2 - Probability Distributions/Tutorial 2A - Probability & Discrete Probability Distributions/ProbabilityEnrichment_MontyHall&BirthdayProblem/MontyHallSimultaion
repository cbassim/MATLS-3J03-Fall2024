{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "6f2fe294-9a20-4629-a511-a519969f32a5",
   "metadata": {},
   "outputs": [],
   "source": [
    "from numpy import random\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "# adapted from https://python.plainenglish.io/using-python-to-simulate-the-famous-monty-hall-problem-b4a9697894ba\n",
    "\n",
    "def MontyHallSimulation (N):\n",
    "    ChoiceStay=[]\n",
    "    ChoiceSwitch=[]\n",
    "    NN=1\n",
    "    for i in range(0,N):\n",
    "        \n",
    "        # 1) The car is placed behind a random door.\n",
    "        WinningDoor=random.choice(['Door 1', 'Door 2', 'Door 3'])\n",
    "\n",
    "        # 2) The contestant selects a random door.\n",
    "        FirstSelection=random.choice(['Door 1', 'Door 2', 'Door 3'])\n",
    "        \n",
    "        # 3) The host opens a door that is different than the contestants choice \n",
    "        #    and not the door with the car.\n",
    "        HostOpens=list(set(['Door 1', 'Door 2', 'Door 3'])-set([FirstSelection,WinningDoor]))[0]\n",
    "        \n",
    "        # 4) The other door is not the participant's selected door and not the opened door. \n",
    "        OtherDoor=list(set(['Door 1', 'Door 2', 'Door 3'])-set([FirstSelection,HostOpens]))[0]\n",
    "        \n",
    "        # 5) Add \"True\" to a list where the participant DOES NOT change their selection AND thier \n",
    "        #    selection identified the door with the car. \n",
    "        ChoiceStay.append(FirstSelection==WinningDoor)\n",
    "        \n",
    "        # 6) Add \"True\" to a list where the participant DOES change their selection and thier \n",
    "        #    new selected door has the car behind it.\n",
    "        ChoiceSwitch.append(OtherDoor==WinningDoor)\n",
    "        \n",
    "    # NOTE: The boolean object \"TRUE\" is equal to 1 and \"False\" is equal to 0.\n",
    "    #       As such, we can use the \"sum\" function to get the total number of wins\n",
    "    #       for each strategy.\n",
    "     \n",
    "    print(f'\\n\\\n",
    "    {N:,} games were played \\n\\\n",
    "    Chances of winning the car based on the following strategies:\\n\\\n",
    "    Remaining with initial selection: {\"{:.1%}\".format(sum(ChoiceStay)/N)}\\n\\\n",
    "    Switching doors: {\"{:.1%}\".format(sum(ChoiceSwitch)/N)}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "21d2a028-fd00-46b7-84d7-775768b324ad",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "    100,000 games were played \n",
      "    Chances of winning the car based on the following strategies:\n",
      "    Remaining with initial selection: 33.2%\n",
      "    Switching doors: 66.8%\n"
     ]
    }
   ],
   "source": [
    "###### Run the Simulation######\n",
    "\n",
    "MontyHallSimulation(N=100000)        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "70be0f2c-b2dc-407f-aa57-5b9094ea4a4b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.3333333333333333"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "1/3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "1b835658-14f7-4168-853e-bf07a6c46210",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.6666666666666666"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "2/3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5fc2867c-4270-4295-a780-1607c6c40326",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
